""""""""""""""""""""""""""""""""""""""
" Author: Jinwook Jung
" Email : jinwookjungs@gmail.com
" Last modification: Wed Jun 27 12:35:19 KST 2018
"
" Guided by vim-bootstrap: https://github.com/avelino/vim-bootstrap
" Change your ~/.vimrc as follows:
"   set runtimepath+=<path to this repository>
"   source <path to this repository>/vimrc
" And run vim with the following parameters to install the plugins:
"   $ vim +PlugInstall +qa
""""""""""""""""""""""""""""""""""""""

let vim_file_path = expand('~/github/my_env/vim/')

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" Vim-PLug core
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if has('vim_starting')
  set nocompatible               " Be iMproved
endif

let vimplug_exists=expand('~/.vim/autoload/plug.vim')

if !filereadable(vimplug_exists)
  if !executable("curl")
    echoerr "You have to install curl or first install vim-plug yourself!"
    execute "q!"
  endif
  echo "Installing Vim-Plug..."
  echo ""
  silent !\curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  let g:not_finish_vimplug = "yes"

  autocmd VimEnter * PlugInstall
endif

" Required:
call plug#begin(expand('~/.vim/plugged'))

"""""""""""""""""""""""""""""""""""""""
"" Plug install packages
"""""""""""""""""""""""""""""""""""""""
Plug 'Valloric/YouCompleteMe'
Plug 'lervag/vimtex'
Plug 'terryma/vim-multiple-cursors'

Plug 'scrooloose/nerdtree'
Plug 'jreybert/vimagit'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'airblade/vim-gitgutter'
"Plug 'majutsushi/tagbar'           THIS MAKES VIM SLOW WHEN OPENING A LARGE FILE
Plug 'scrooloose/syntastic'
Plug 'sheerun/vim-polyglot'

if isdirectory('/usr/local/opt/fzf')
  Plug '/usr/local/opt/fzf' | Plug 'junegunn/fzf.vim'
else
  Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --bin' }
  Plug 'junegunn/fzf.vim'
endif

if v:version >= 704
  "" Snippets
  Plug 'SirVer/ultisnips'
endif
Plug 'honza/vim-snippets'

"Plug 'fatih/vim-go'

call plug#end()

"" Required:
filetype plugin indent on


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" General settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set encoding=utf-8
set fileencoding=utf-8
set fileencodings=utf-8
set ttyfast                     " Smoother scroll
set lazyredraw                  " buffer screen updates instead of updating all the time. 
set backspace=indent,eol,start  " Fix backspace over indent, line breaks
set hidden                      " Enable hidden buffers

"" Tabs. May be overriten by autocmd rules
set tabstop=4                   " number of spaces of tab character
set softtabstop=4
set shiftwidth=4                " number of spaces to (auto)indent
set expandtab

"" Searching
set hlsearch
set incsearch
set ignorecase
set smartcase

set nobackup                    " Disable swap files.
set noswapfile

set fileformats=unix,dos,mac

set noscrollbind
set cindent
set autoindent
set smartindent
set nowrap
set hlsearch

set showcmd     " Show (partial) command in status line.
set showmatch   " Show matching brackets.

set ttimeoutlen=50
set history=700
set autoread

if has("gui_running")
    " Set the cursorline
    set cursorline
else
    " Save state on all files of vim
    autocmd BufWinLeave *.* mkview
    autocmd BufWinEnter *.* silent loadview
endif

if has('win32')
    set guifont=Consolas:h12   " Win32.
elseif has('gui_macvim')
    set guifont=IBM\ Plex\ Mono:h14,Monaco:h14
else
    set guifont=Monospace\ 12  " Linux.
endif

"""""""""""""""""""""""""""""""""""""""
"" Visual Settings
"""""""""""""""""""""""""""""""""""""""
syntax on
set ruler       " Show current position
set number

let no_buffers_menu=1

set mousemodel=popup
set t_Co=256
set guioptions=egmrti
set gfn=Monospace\ 10

set autoread        " Update automatically when a file is changed outside

set gcr=a:blinkon0  " Disable the blinking cursor.
set scrolloff=3     " Keep the cursor away from top/bottom

"" Status bar
set laststatus=2    " Always show a status bar

"" Use modeline overrides
set modeline
set modelines=10

set title
set titleold="Terminal"
set titlestring=%F

set statusline=%F%m%r%h%w%=(%{&ff}/%Y)\ (line\ %l\/%L,\ col\ %c)\

" Disable visualbell
set noerrorbells visualbell t_vb=
if has('autocmd')
  autocmd GUIEnter * set visualbell t_vb=
endif

set bg=dark


"""""""""""""""""""""""""""""""""""""""
"" Color
"""""""""""""""""""""""""""""""""""""""
colorscheme jellybeans_modified
"set cursorline
""highlight CursorLine ctermfg=NONE ctermbg=53 cterm=bold

" Parenthesis highlighting
"autocmd BufRead,BufNewFile * syn match parens /[(){}]/ | hi parens ctermfg=11

if $COLORTERM == 'gnome-terminal'
    set term=gnome-256color
elseif $TERM == 'xterm'
  set term=xterm-256color
endif
if &term =~ '256color'
  set t_ut=
endif


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" Key mappings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" Map leader to ,
let mapleader=','
let maplocalleader="\<space>"

" Location list
noremap <leader>lc :lclose<cr>
noremap <leader>lp :lprevious<cr>
noremap <leader>ln :lnext<cr>

" Split
noremap <leader>h :sp<cr>
noremap <leader>v :vsp<cr>
noremap <space>w :w<cr>

" Buffer navigation
noremap <leader>0 :b!0<cr>
noremap <leader>1 :b!1<cr>
noremap <leader>2 :b!2<cr>
noremap <leader>3 :b!3<cr>
noremap <leader>4 :b!4<cr>
noremap <leader>5 :b!5<cr>
noremap <leader>6 :b!6<cr>
noremap <leader>7 :b!7<cr>
noremap <leader>8 :b!8<cr>
noremap <leader>9 :b!9<cr>
noremap <leader>x :bn!<cr>
noremap <leader>z :bp!<cr>
noremap <leader>w :bw!<cr>
noremap <leader>make :!make<cr>

"" Clean search (highlight)
nnoremap <silent> <leader><cr> :noh<cr>

" Folding
noremap <F1> v]}zf
noremap <F2> zo

"F1 to F4

"F5 to F8
nnoremap <silent> <F5> :NERDTreeToggle<cr>

"F9 to F12

"" Tabs
nnoremap <silent> <S-t> :tabnew<CR>
"map <leader>tn :tabnew<cr>
"map <leader>to :tabonly<cr>
"map <leader>tc :tabclose<cr>
"map <leader>tm :tabmove

"" Opens a new tab with the current buffer's path
"" Super useful when editing files in the same directory
"map <leader>te :tabedit <c-r>=expand("%:p:h")<cr>/

"" Set working directory
noremap <leader>. :lcd %:p:h<CR>

"" Opens an edit command with the path of the currently edited file filled in
noremap <leader>e :e <C-R>=expand("%:p:h") . "/"<CR>

"" Opens a tab edit command with the path of the currently edited file filled
noremap <leader>te :tabe <C-R>=expand("%:p:h") . "/"<CR>

" Spell Checking
map <leader>ss :setlocal spell!<cr>
map <leader>sn ]s
map <leader>sp [s
map <leader>sa zg
map <leader>s? z=

nnoremap <silent> <leader>b :Buffers<CR>


"""""""""""""""""""""""""""""""""""""""
"" Abbreviations
"""""""""""""""""""""""""""""""""""""""
"" no one is really happy until you have this shortcuts
cnoreabbrev W! w!
cnoreabbrev Q! q!
cnoreabbrev Qall! qall!
cnoreabbrev Wq wq
cnoreabbrev Wa wa
cnoreabbrev wQ wq
cnoreabbrev WQ wq
cnoreabbrev W w
cnoreabbrev Q q
cnoreabbrev Qall qall


"*****************************************************************************
"" Autocmd Rules
"*****************************************************************************
if !exists('*s:setupWrapping')
  function s:setupWrapping()
    set wrap
    set wm=2
    set textwidth=79
  endfunction
endif

"" txt
augroup vimrc-wrapping
  autocmd!
  autocmd BufRead,BufNewFile *.txt call s:setupWrapping()
  autocmd BufRead,BufNewFile *.md set wrap
  autocmd BufRead,BufNewFile *.tex set wrap
augroup END

"" Remember cursor position
augroup vimrc-remember-cursor-position
  autocmd!
  autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
augroup END


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" Plugin Settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""""""""""""
" vim-airline
"""""""""""""""""""""""""""""""""""""""
let g:airline_theme = 'minimalist'
"let g:airline_theme = 'molokai'

let g:airline#extensions#syntastic#enabled = 1
"let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#buffer_nr_show = 1
let g:airline_skip_empty_sections = 1
let g:airline_highlighting_cache = 1


""""""""""""""""""""""""""""""""""""""
" Syntastic
""""""""""""""""""""""""""""""""""""""
" syntastic
let g:syntastic_always_populate_loc_list=1
let g:syntastic_error_symbol='e'
let g:syntastic_warning_symbol='w'
let g:syntastic_style_error_symbol = 'e'
let g:syntastic_style_warning_symbol = 'w'
let g:syntastic_auto_loc_list=1
let g:syntastic_aggregate_errors = 1

" syntastic
let g:syntastic_python_checkers=['python', 'flake8']
let g:syntastic_mode_map = {
    \ "mode": "passive",
    \ "passive_filetypes": ["tcl", "fortran", "go"] }

noremap <leader>sr :SyntasticReset<CR>
noremap <leader>sc :SyntasticCheck<CR>


"""""""""""""""""""""""""""""""""""""""
" YCM
"""""""""""""""""""""""""""""""""""""""
let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py'
let g:ycm_confirm_extra_conf = 0
let g:ycm_key_list_select_completion = ['<TAB>']
let g:ycm_key_list_previous_completion = ['<S-TAB>']
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_error_symbol = '>'
let g:ycm_warning_symbol = '*'
let g:ycm_key_invoke_completion = '<C-1>'
let g:ycm_complete_in_comments = 1

nnoremap <leader>yg :YcmCompleter GoTo<cr>
" nnoremap gg :YcmCompleter GoToImprecise
nnoremap <leader>yd :YcmCompleter GoToDeclaration<cr>
nnoremap <leader>yf :YcmCompleter GoToDefinition<cr>
nnoremap <leader>yt :YcmCompleter GetType<cr>
nnoremap <leader>yp :YcmCompleter GetParent<cr>
nnoremap <leader>yc :YcmForceCompileAndDiagnostics<CR>


"""""""""""""""""""""""""""""""""""""""
" vimtex
"""""""""""""""""""""""""""""""""""""""
let g:vimtex_view_method = 'skim'
if !exists('g:ycm_semantic_triggers')
    let g:ycm_semantic_triggers = {}
endif
let g:ycm_semantic_triggers.tex = g:vimtex#re#youcompleteme

if empty(v:servername) && exists('*remote_startserver')
    call remote_startserver('VIM')
endif


"""""""""""""""""""""""""""""""""""""""
" Snippets
"""""""""""""""""""""""""""""""""""""""
let g:UltiSnipsExpandTrigger="<c-e>"
" let g:UltiSnipsListSnippets                <c-tab>
" let g:UltiSnipsJumpForwardTrigger          <c-j>
" let g:UltiSnipsJumpBackwardTrigger         <c-k>
let g:UltiSnipsEditSplit="vertical"


"""""""""""""""""""""""""""""""""""""""
" NERDTree configuration
"""""""""""""""""""""""""""""""""""""""
let g:NERDTreeChDirMode=2
let g:NERDTreeIgnore=['\.rbc$', '\~$', '\.pyc$', '\.db$', '\.sqlite$', '__pycache__']
let g:NERDTreeSortOrder=['^__\.py$', '\/$', '*', '\.swp$', '\.bak$', '\~$']
let g:NERDTreeShowBookmarks=1
let g:nerdtree_tabs_focus_on_files=1
let g:NERDTreeMapOpenInTabSilent = '<RightMouse>'
let g:NERDTreeWinSize = 50
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.pyc,*.db,*.sqlite


"""""""""""""""""""""""""""""""""""""""
" vim-gitgutter and vimagit
"""""""""""""""""""""""""""""""""""""""
noremap <leader>M :Magit<CR>
noremap <leader>gn :GitGutterNextHunk<CR>
noremap <leader>gp :GitGutterPrevHunk<CR>
noremap <leader>gt :GitGutterToggle<CR>


"""""""""""""""""""""""""""""""""""""""
" fzf.vim
"""""""""""""""""""""""""""""""""""""""
set wildmode=list:longest,list:full
set wildignore+=*.o,*.obj,.git,*.rbc,*.pyc,__pycache__
let $FZF_DEFAULT_COMMAND =  "find * -path '*/\.*' -prune -o -path 'node_modules/**' -prune -o -path 'target/**' -prune -o -path 'dist/**' -prune -o  -type f -print -o -type l -print 2> /dev/null"

" The Silver Searcher
if executable('ag')
  let $FZF_DEFAULT_COMMAND = 'ag --hidden --ignore .git -g ""'
  set grepprg=ag\ --nogroup\ --nocolor
endif

cnoremap <C-P> <C-R>=expand("%:p:h") . "/" <CR>
nnoremap <silent> <leader>e :FZF -m<CR>


"""""""""""""""""""""""""""""""""""""""
" Polyglot
"""""""""""""""""""""""""""""""""""""""
let g:polyglot_disabled = ['python', 'latex']



"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Custom Functions
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""
" New file skeleton
""""""""""""""""""""""""""""""""""""""
let template_dir = expand(vim_file_path . 'templates/')
let $C_HEADER_TXT = expand(template_dir . 'c_header.txt')
let $PY_HEADER_TXT = expand(template_dir . 'py_header.txt')

func! NewFileC(ext)
    let fname = expand("%:t:r") . a:ext
    silent! 0r $C_HEADER_TXT
    exe ":1,6s/FILE_NAME/".fname
    exe ":1,6s/LAST_MODIFIED/".strftime("%Y-%m-%d %H:%M:%S")
    exe ":1,6s/CREATE_DATE/".strftime("%c")
endfunc
func! NewFilePython()
    let fname = expand("%:t:r") . ".py"
    silent! 0r $PY_HEADER_TXT
    exe ":1,7s/FILE_NAME/".fname
    exe ":1,7s/CREATE_DATE/".strftime("%c")
    exe ":1,7s/LAST_MODIFIED/".strftime("%Y-%m-%d %H:%M:%S")
endfunc
func! UpdateLastModified()
    if (&ft=='c' || &ft=='C' || &ft=='cpp' || &ft=='h')
        exe ":1,7s/@date.*/@date    " .strftime("%Y-%m-%d %H:%M:%S")
    endif
    if (expand("%:e") =='py')
        exe ":1,7s/Last modified  :.*/Last modified  : " .strftime("%Y-%m-%d %H:%M:%S")
    endif
endfunc
func! UpdateLastModifiedAndQuit()
    exe UpdateLastModified()
    exe ":wq!"
endfunc

nmap <leader>q :call UpdateLastModifiedAndQuit()<cr><cr>
nmap <leader>ulm :call UpdateLastModified()<cr><cr>
nmap <leader>dc :call InsertDoxygenClass()<cr><cr>
nmap <leader>df :call InsertDoxygenFunction()<cr><cr>
nmap <leader>ufd :call UpdateDoxygenDate()<cr><cr>

autocmd BufNewFile *.c   call NewFileC(".c")
autocmd BufNewFile *.cpp call NewFileC(".cpp")
autocmd BufNewFile *.h   call NewFileC(".h")
autocmd BufNewFile *.py  call NewFilePython()


"""""""""""""""""""""""""""""""""""""""
"" CTags and CScope
"""""""""""""""""""""""""""""""""""""""
set tags=tags;
if version >= 500
    func! Sts( )
        let st = expand("<cword>")
        exe "sts ".st
    endfunc
    nmap ,st :call Sts( )<cr>

    func! Tj( )
        let st = expand("<cword>")
        exe "tj ".st
    endfunc
    nmap ,tj :call Tj( )<cr>

    "Man page for C language
    func! Man()
        let sm = expand("<cword>")
        exe "!man -S 2:3:4:5:6:7:8:9:tcl:n:l:p:o ".sm
    endfunc
    nmap <leader>ma :call Man()<cr><cr>
endif

func! TrimWhitespace()
    let l:save = winsaveview()
    %s/\s\+$//e
    call winrestview(l:save)
endfun
command! TrimWhitespace call TrimWhitespace()
nmap <leader>tw :call TrimWhitespace()<cr><cr>

